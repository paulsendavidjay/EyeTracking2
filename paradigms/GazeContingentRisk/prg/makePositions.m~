%===============================================================
%                                NUMEROSITY FOUR (4)
%===============================================================
%               FULL SIZE

%  ASSUMES OFFSET COLUMNS WILL BE USED (.866 OFFSET)
    aspect50 = dotFrame50(3) / dotFrame50(4) ; 
    scalingFactor = Y1;
    [items_on_x, items_on_y, maxd4_50] = find_geometry(numerosity, sparse, aspect50); 
    maxd4_50 = floor(.5*maxd4_50*(scalingFactor));  

%  CREATE MATRIX OF (X, Y) STARTING POINTS FOR FULL SIZE CIRCLES IN 50% FRAME
            positions{1}{3} = zeros(items_on_x*items_on_y, 2);
            current_y = 0;
            current_position_number = 1;
            for y = 1:items_on_y
                if (mod(y,2) == 1)  % maxd will added back at the first iteration, and offset by column
                    current_x = 0 - maxd4_50;
                else
                    current_x = 0 - .5*maxd4_50;
                end
                for x = 1:items_on_x
                    current_x = current_x + maxd4_50;
                    positions{1}{3}(current_position_number, :) = [current_x, current_y];
                    current_position_number = current_position_number + 1;
                end
                current_y = current_y + 0.866*maxd4_50;
            end
            
            %   ADJUST X,Y POSITIONS TO CENTER DOT MATRIX WITHIN FRAME
            xCentering = (dotFrame50(3) - (max(positions{1}{3}(: , 1)) + maxd4_50))/2;
            yCentering = (dotFrame50(4) - (max(positions{1}{3}(: , 2)) + maxd4_50))/2;
            for i = 1:length(positions{1}{3}(:,1))
                positions{1}{3}(i, :) = positions{1}{3}(i, :) + [xCentering, yCentering];
            end
             positions{1}{3} = floor(positions{1}{3});
 
             % ADD COLUMN OF RANDOM NUMBERS for RANDOM PLACEMENT
            %seed = seed + 1;
            %rand('seed', seed); % using a seed to generate the same random numbers
            positions{1}{3}(:, 3) = rand(length(positions{1}{3}(:,1)), 1);
            positions{1}{3} = sortrows(positions{1}{3}, 3);

            
            %   ADJUST X,Y POSITIONS TO CENTER DOT MATRIX WITHIN FRAME
            xCentering = (dotFrame25(3) - (max(positions{1}{4}(: , 1)) + maxd4_50))/2;
            yCentering = (dotFrame25(4) - (max(positions{1}{4}(: , 2)) + maxd4_50))/2;
            for i = 1:length(positions{1}{4}(:,1))
                positions{1}{4}(i, :) = positions{1}{4}(i, :) + [xCentering, yCentering];
            end
            positions{1}{4} = floor(positions{1}{4});

            % ADD COLUMN OF RANDOM NUMBERS for RANDOM PLACEMENT
            %seed = seed + 1;
            %rand('seed', seed); % using a seed to generate the same random numbers
            positions{1}{4}(:, 3) = rand(length(positions{1}{4}(:,1)), 1);
            positions{1}{4} = sortrows(positions{1}{4}, 3);


    
            
%===============================================================
%                                NUMEROSITY EIGHT (8)
%===============================================================
%               FULL SIZE

    
%  ASSUMES OFFSET COLUMNS WILL BE USED (.866 OFFSET)
    aspect50 = dotFrame50(3) / dotFrame50(4);
    scalingFactor = Y1;
    [items_on_x, items_on_y, maxd8_50] = find_geometry(numerosity, sparse, aspect50); 
    maxd8_50 = floor(.5*maxd8_50*(scalingFactor));  
    
%  CREATE MATRIX OF (X, Y) STARTING POINTS FOR FULL SIZE CIRCLES IN 50% FRAME
            positions{2}{3} = zeros(items_on_x*items_on_y, 2);
            current_y = 0;
            current_position_number = 1;
            for y = 1:items_on_y
                if (mod(y,2) == 1)  % maxd will added back at the first iteration, and offset by column
                    current_x = 0 - maxd8_50;
                else
                    current_x = 0 - .5*maxd8_50;
                end
                for x = 1:items_on_x
                    current_x = current_x + maxd8_50;
                    positions{2}{3}(current_position_number, :) = [current_x, current_y];
                    current_position_number = current_position_number + 1;
                end
                current_y = current_y + 0.866*maxd8_50;
            end

            %   ADJUST X,Y POSITIONS TO CENTER DOT MATRIX WITHIN FRAME
            xCentering = (dotFrame50(3) - (max(positions{2}{3}(: , 1)) + maxd8_50))/2;
            yCentering = (dotFrame50(4) - (max(positions{2}{3}(: , 2)) + maxd8_50))/2;
            for i = 1:length(positions{2}{3}(:,1))
                positions{2}{3}(i, :) = positions{2}{3}(i, :) + [xCentering, yCentering];
            end
            positions{2}{3} = floor(positions{2}{3});

            % ADD COLUMN OF RANDOM NUMBERS for RANDOM PLACEMENT
            %seed = seed + 1;
            %rand('seed', seed); % using a seed to generate the same random numbers
            positions{2}{3}(:, 3) = rand(length(positions{2}{3}(:,1)), 1);
            positions{2}{3} = sortrows(positions{2}{3}, 3);




    
%===============================================================
%                                WINNINGS TOTAL NUMBER = 100
%===============================================================
%               SMALL SIZE

    maxWinnings = 100;
    sparse = 1;
%  BEGIN WITH SMALLEST SUBFRAME (FRAME WIDTH / HEIGHT OF 75% BAR)
%  ASSUMES OFFSET COLUMNS WILL BE USED (.866 OFFSET)
    aspectWinnings = (winFramePos(3) - winFramePos(1)) / (winFramePos(4) - winFramePos(2));
    scalingFactor = (winFramePos(4) - winFramePos(2));
    [items_on_x, items_on_y, maxdWinnings] = find_geometryWinnings(maxWinnings, sparse, aspectWinnings);
    maxdWinnings = floor(.5*maxdWinnings*scalingFactor);  
    
%  CREATE MATRIX OF (X, Y) STARTING POINTS FOR FULL SIZE CIRCLES
    winPositions = zeros(items_on_x*items_on_y, 2);
    current_y = winFramePos(2);
    current_position_number = 1;
    for y = 1:items_on_y
        if (mod(y,2) == 1)  % maxd will added back at the first iteration, and offset by column
            current_x = winFramePos(1) - maxdWinnings;
        else
            current_x = winFramePos(1) - .5*maxdWinnings;
        end
        for x = 1:items_on_x
            current_x = current_x + maxdWinnings;
            winPositions(current_position_number, :) = [current_x, current_y];
            current_position_number = current_position_number + 1;
        end
        current_y = current_y + 0.866*maxdWinnings; % subtracting 2*maxd for going backwards
    end

% SET WINNINGS TO REST AT BOTTOM OF SCREEN AND REVERSE ORDER FOR PLOTTING
    
    y_offset = floor(winFramePos(4) - max(winPositions(:, 2)));
    [numRows, numCols] = size(winPositions);
    reverse = zeros(numRows, numCols);
    
    i = numRows;
    count = 1;
    while i > 0
        reverse(count, :) = winPositions(i, :) + [0, y_offset - .5*lineWidth - maxdWinnings];
        i = i-1;
        count = count + 1;
    end
    winPositions = reverse;
    clear reverse;
    
    
    
    